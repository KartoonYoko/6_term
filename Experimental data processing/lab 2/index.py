import matplotlib.pyplot as plt
import module
import math


# variant 17

# 1. Построить ряды распределения (интервальный и дискретный вариационные ряды). Изобразить их графики.
# 2. Построить график накопительных частот — кумуляту.
# 3. Найти эмпирическую функцию распределения и изобразить ее графически.
# 4. Вычислить моду, медиану, выборочную среднюю, выборочную
# дисперсию, выборочное среднее квадратическое отклонение, коэффициент вариации, асимметрию, эксцесс.
# 5. Построить доверительные интервалы для истинного значения измеряемой величины и среднего квадратического отклонения
#       генеральной совокупности.
# 6. Раскрыть смысловую сторону каждой характеристики.

arr = [
    82, 83, 73, 76, 79, 89, 95, 92, 93, 84, 88, 76, 88,
    81, 78, 86, 84, 84, 86, 85, 87, 84, 74, 83, 87, 73,
    76, 73, 78, 76, 76, 74, 88, 82, 73, 85, 79, 77, 79,
    97, 84, 80, 75, 81, 73, 78, 83, 75, 90, 83, 77, 84,
    85, 90, 92, 91, 85, 71, 85, 87, 82, 94, 92, 76, 93,
    90, 73, 92, 84, 93, 88, 84, 81, 93, 81, 91, 78, 85,
    84, 95, 79, 79, 83, 96, 89, 82, 79, 77, 83, 88, 81,
    88, 82, 77, 92, 76, 84, 83, 87, 89
]


# 1. Построить ряды распределения (интервальный и дискретный вариационные ряды). Изобразить их графики.
# Интервальный вариационный ряд, где { 'x1 - x2' : y } x1, x2 - варианты, y - частоты
interval_variation = {}
# Дискретный вариационный ряд, где { x : y } x - варианты, y - частоты
discrete_variation = {}
module.variations(arr, interval_variation, discrete_variation, False)

# 2. Построить график накопительных частот — кумуляту.
# кумуляту, где { x : y } x - варианты, y - накопительные частоты
cumulative = {}
module.cumulative(arr, discrete_variation, cumulative, False)

# 3. Найти эмпирическую функцию распределения и изобразить ее графически.
emperical = {}
module.emperical_func(arr, emperical, cumulative, False)

# 4. Вычислить моду, медиану, выборочную среднюю, выборочную
# дисперсию, выборочное среднее квадратическое отклонение, коэффициент вариации, асимметрию, эксцесс.

data = module.unbiased_estimates(arr, discrete_variation)

# на основе дискретного вариационного ряда, полученного в лабораторной работе № 1, выполнить следующее:
# Построить эмпирическую (полигон) и теоретическую (нормальную) кривую распределения.
# Проверить согласованность эмпирического распределения с теоретическим нормальным, применяя три критерия:
# а) критерий Пирсона;
# б) один из критериев: Колмогорова, Романовского, Ястремского;
# в) приближенный критерий.


def emperical(arr, disc, aver_x, aver_dev, assim, ex, is_print=True):
    """
        строит эмперическую и
        теоретическую кривую распределения

        disc - дискретный ряд
        aver_x - средняя выборочная
        aver_dev - среднее квадратичное отклонение
        assim - ассиметрия
        ex - эксцесс
    """
    n = len(arr)
    #   - размах варьирования признака X
    Xmax = max(arr)
    Xmin = min(arr)
    R = Xmax - Xmin

    #   - число интервалов вариационног ряда k
    k = len(arr) ** 0.5

    #   - длину h частичных интервалов
    h = R / k
    # локальная функция лапласа
    laplas = lambda x: round((1 / math.sqrt(2 * math.pi)) * math.exp(-1 * x ** 2 / 2), 4)
    u_arr = []      # n'i
    for key in disc:
        u_arr.append(round((n * h / aver_dev) * laplas((key - aver_x) / aver_dev)))
    sum = 0     # x^2
    i = 0
    for key in disc:
        sum += (disc[key] - u_arr[i]) ** 2 / u_arr[i]
        i += 1

    # Проверить согласованность эмпирического распределения с теоретическим нормальным, применяя три критерия:
    # а) критерий Пирсона;

    # число степеней свободы (k)
    number_degrees_freedom = 7
    # находим по приложению 5
    x_kr = 2.17
    print("x^2", sum, "; x^2кр", x_kr)
    if x_kr < sum:
        print("Так как x^2кр < x^2, то делаем вывод, что данные не подчиняются нормальному закону распределения")
    # б) критерий Романовского
    roman = abs((sum - number_degrees_freedom) / math.sqrt(2 * number_degrees_freedom))
    print("критерий Романовского", roman)

    # в) приближенный критерий.
    sas = round(math.sqrt((6 * (n - 1)) / ((n + 1) * (n + 3))), 2)
    sex = round(math.sqrt((24 * n * (n - 2) * (n - 3)) / ((n - 1) ** 2 * (n + 3) * (n + 5))), 2)
    print("As", round(assim, 2), "SAs", sas)
    print("Ex", round(ex, 2), "SEx", sex)

    if is_print:
        plt.title('Вариационный ряд')
        plt.xlabel('Варианты')
        plt.ylabel('Частоты')
        plt.plot(disc.keys(), disc.values(), color="red")   # эмпирическая кривая
        plt.plot(disc.keys(), u_arr,  linestyle=':', color="blue")  # теоретическая кривая

        plt.show()


emperical(arr, discrete_variation, data[0], data[1], data[2], data[3])

